'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = mergeChildReducers;

var _loop = require('./loop');

var _cmd = require('./cmd');

var _cmd2 = _interopRequireDefault(_cmd);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function mergeChildReducers(parentResult, action, childMap) {
  var initialState = parentResult,
      parentCmd = void 0;
  if ((0, _loop.isLoop)(initialState)) {
    parentCmd = (0, _loop.getCmd)(initialState);
    initialState = (0, _loop.getModel)(initialState);
  }

  var cmds = parentCmd ? [parentCmd] : [];
  var hasChanged = false;

  var newState = Object.keys(childMap).reduce(function (prev, key) {
    var childReducer = childMap[key];
    if (!childReducer) {
      if (!hasChanged) {
        prev = _extends({}, prev);
        hasChanged = true;
      }
      delete prev[key];
      return prev;
    }
    var currentChild = childReducer(prev[key], action);
    if ((0, _loop.isLoop)(currentChild)) {
      cmds.push((0, _loop.getCmd)(currentChild));
      currentChild = (0, _loop.getModel)(currentChild);
    }

    if (prev[key] !== currentChild && hasChanged) {
      prev[key] = currentChild;
    } else if (prev[key] !== currentChild) {
      prev = _extends({}, prev, _defineProperty({}, key, currentChild));
      hasChanged = true;
    }
    return prev;
  }, initialState);

  return (0, _loop.loop)(newState, getListCmdIfNeeded(cmds));
}

function getListCmdIfNeeded(cmds) {
  switch (cmds.length) {
    case 0:
      return _cmd2['default'].none;
    case 1:
      return cmds[0];
    default:
      return _cmd2['default'].list(cmds);
  }
}