var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

import { liftState } from './loop';
import { executeCmd } from './cmd';
import { loopPromiseCaughtError } from './errors';

export function install() {
  return function (next) {
    return function (reducer, initialState, enhancer) {
      var _liftState = liftState(initialState),
          _liftState2 = _slicedToArray(_liftState, 2),
          initialModel = _liftState2[0],
          initialCmd = _liftState2[1];

      var cmdsQueue = [];

      var liftReducer = function liftReducer(reducer) {
        return function (state, action) {
          var result = reducer(state, action);

          var _liftState3 = liftState(result),
              _liftState4 = _slicedToArray(_liftState3, 2),
              model = _liftState4[0],
              cmd = _liftState4[1];

          cmdsQueue.push({ originalAction: action, cmd: cmd });
          return model;
        };
      };

      var store = next(liftReducer(reducer), initialModel, enhancer);

      var runCmds = function runCmds(queue) {
        var promises = queue.map(runCmd).filter(function (x) {
          return x;
        });
        if (promises.length === 0) {
          return Promise.resolve();
        } else if (promises.length === 1) {
          return promises[0];
        } else {
          return Promise.all(promises).then(function () {});
        }
      };

      var runCmd = function runCmd(_ref) {
        var originalAction = _ref.originalAction,
            cmd = _ref.cmd;

        var cmdPromise = executeCmd(cmd, dispatch, store.getState);

        if (!cmdPromise) return null;

        return cmdPromise.then(function (actions) {
          if (!actions.length) return;
          return Promise.all(actions.map(dispatch));
        })['catch'](function (error) {
          console.error(loopPromiseCaughtError(originalAction.type, error));
          throw error;
        });
      };

      var dispatch = function dispatch(action) {
        store.dispatch(action);
        var cmdsToRun = cmdsQueue;
        cmdsQueue = [];
        return runCmds(cmdsToRun);
      };

      var replaceReducer = function replaceReducer(reducer) {
        return store.replaceReducer(liftReducer(reducer));
      };

      runCmd({
        originalAction: { type: '@@ReduxLoop/INIT' },
        cmd: initialCmd
      });

      return _extends({}, store, {
        dispatch: dispatch,
        replaceReducer: replaceReducer
      });
    };
  };
}