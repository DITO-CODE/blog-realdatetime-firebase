var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var concat = Array.prototype.concat;

export var flatten = function flatten(array) {
  return concat.apply([], array);
};

export var throwInvariant = function throwInvariant(condition, message) {
  if (!condition) {
    throw Error(message);
  }
};

export var isPromiseLike = function isPromiseLike(obj) {
  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.then === 'function';
};